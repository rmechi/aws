{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to python tutorial #","title":"Home"},{"location":"index.html#welcome-to-python-tutorial","text":"","title":"Welcome to python tutorial"},{"location":"aws/arrays.html","text":"Go Arrays # Go arrays are fixed length. you can define length by [length] ex. [5] or inferred [...] compiler decide in this case. declare a slice: # var array = [length]datatype{values} var array = [...]datatype{values} array := [length]datatype{values} array := [...]datatype{values} access and change the element: # example: package main import (\"fmt\") func main() { arr := [4]int{1, 2, 3, 4} fmt.Printf(\"arr element = %v\\n\", arr[1]) arr[1] = 22 fmt.Printf(\"arr element = %v\\n\", arr[1]) } output: arr element = 2 arr element = 22 more examples # example: package main import (\"fmt\") func main() { arr1 := [4]string{} arr2 := [4]string{\"a\",\"b\"} arr3 := [4]string{\"a\",\"b\",\"c\",\"d\"} arr4 := [4]string{1:\"tom\",3:\"bom\"} arr5 := [4]int{1:10,2:40} arr6 := [...]int{1,2,3,4,5,6,7} fmt.Println(\"array is\", arr1, \"length is\", len(arr1)) fmt.Println(\"array is\", arr2, \"length is\", len(arr2)) fmt.Println(\"array is\", arr3, \"length is\", len(arr3)) fmt.Println(\"array is\", arr4, \"length is\", len(arr4)) fmt.Println(\"array is\", arr5, \"length is\", len(arr5)) fmt.Println(\"array is\", arr6, \"length is\", len(arr6)) } output: array is [ ] length is 4 array is [a b ] length is 4 array is [a b c d] length is 4 array is [ tom bom] length is 4 array is [0 10 40 0] length is 4 array is [1 2 3 4 5 6 7] length is 7 loop through # example: package main import (\"fmt\") func main() { arr6 := [...]string{\"tom\", \"dom\"} for i, s := range arr6 { fmt.Println(i, s) } for _, s := range arr6 { fmt.Println(s) } } output: 0 tom 1 dom tom dom Memory Representation # In Go, there is no such thing as passing by reference. Everything is passed by value. If you assign the value of an array to another variable, the entire value is copied. arr2 := arr If you want to pass just the \u201creference\u201d to the array, you can use pointers: arr2 := &arr More Reading: - https://www.sohamkamani.com/golang/arrays-vs-slices/ - https://www.godesignpatterns.com/2014/05/arrays-vs-slices.html","title":"Arrays"},{"location":"aws/arrays.html#go-arrays","text":"Go arrays are fixed length. you can define length by [length] ex. [5] or inferred [...] compiler decide in this case.","title":"Go Arrays"},{"location":"aws/arrays.html#declare-a-slice","text":"var array = [length]datatype{values} var array = [...]datatype{values} array := [length]datatype{values} array := [...]datatype{values}","title":"declare a slice:"},{"location":"aws/arrays.html#access-and-change-the-element","text":"example: package main import (\"fmt\") func main() { arr := [4]int{1, 2, 3, 4} fmt.Printf(\"arr element = %v\\n\", arr[1]) arr[1] = 22 fmt.Printf(\"arr element = %v\\n\", arr[1]) } output: arr element = 2 arr element = 22","title":"access and change the element:"},{"location":"aws/arrays.html#more-examples","text":"example: package main import (\"fmt\") func main() { arr1 := [4]string{} arr2 := [4]string{\"a\",\"b\"} arr3 := [4]string{\"a\",\"b\",\"c\",\"d\"} arr4 := [4]string{1:\"tom\",3:\"bom\"} arr5 := [4]int{1:10,2:40} arr6 := [...]int{1,2,3,4,5,6,7} fmt.Println(\"array is\", arr1, \"length is\", len(arr1)) fmt.Println(\"array is\", arr2, \"length is\", len(arr2)) fmt.Println(\"array is\", arr3, \"length is\", len(arr3)) fmt.Println(\"array is\", arr4, \"length is\", len(arr4)) fmt.Println(\"array is\", arr5, \"length is\", len(arr5)) fmt.Println(\"array is\", arr6, \"length is\", len(arr6)) } output: array is [ ] length is 4 array is [a b ] length is 4 array is [a b c d] length is 4 array is [ tom bom] length is 4 array is [0 10 40 0] length is 4 array is [1 2 3 4 5 6 7] length is 7","title":"more examples"},{"location":"aws/arrays.html#loop-through","text":"example: package main import (\"fmt\") func main() { arr6 := [...]string{\"tom\", \"dom\"} for i, s := range arr6 { fmt.Println(i, s) } for _, s := range arr6 { fmt.Println(s) } } output: 0 tom 1 dom tom dom","title":"loop through"},{"location":"aws/arrays.html#memory-representation","text":"In Go, there is no such thing as passing by reference. Everything is passed by value. If you assign the value of an array to another variable, the entire value is copied. arr2 := arr If you want to pass just the \u201creference\u201d to the array, you can use pointers: arr2 := &arr More Reading: - https://www.sohamkamani.com/golang/arrays-vs-slices/ - https://www.godesignpatterns.com/2014/05/arrays-vs-slices.html","title":"Memory Representation"},{"location":"aws/datatypes.html","text":"Data types specify the type of data that a valid Go variable can hold Basic Types Integers (Signed and UnSigned) Floats Complex Numbers Byte Rune String Booleans Composite ( Unnamed ) Types In computer science, a composite data type is any data type which can be constructed in a program using its programming language's primitive data types and other composite types. Composite types are known as \u201cunnamed types\u201d, because they use a type literal to represent the structural definition of the type, instead of using a simple name identifier Non-Reference Types Arrays Structs Reference Types ( Non-primitive ) Slices Channels Maps Pointers Functions Interface Special case of empty interface A primitive data type type that hold simple values. A primitive type has always a value, while non-primitive types can be null. In golang, we have string, numeric type ( integer, float and complex ), bool, and error type. variable contains the value Non-primitive data types Non-Primitive data types refer to objects and hence they are called reference types. variable contains address of the value Default values: - String: \"\" - integer, byte, rune is 0 - Float 0 - complex 0+0i - Booleans False - Pointers ( var num *int - fmt.Println(num) ) is nil - structs { \"\", 0 } - slices nil - map in Go is nil","title":"Datatypes"},{"location":"aws/maps.html","text":"Go maps # maps are collection of key: value pairs no duplicates. you can use len() function changable declaring # var a = map[KeyType]ValueType{key1:value1, key2:value2,...} b := map[KeyType]ValueType{key1:value1, key2:value2,...} var x = make(map[string]string) example # package main import (\"fmt\") func main() { var a = map[string]string{\"a\": \"apple\", \"b\": \"ball\"} b := map[string]int{\"x\": 1, \"y\": 2} var c map[string]string // empty map using variable var d = make(map[string]string) // empty map using make function fmt.Printf(\"a\\t%v\\n\", a) fmt.Printf(\"b\\t%v\\n\", b) fmt.Printf(\"a\\t%v\\n\", c) fmt.Printf(\"b\\t%v\\n\", d) fmt.Println(c == nil) fmt.Println(d == nil) //c[\"a\"] = \"apple\" // panic: assignment to entry in nil map d[\"a\"] = \"apple\" // adding/updating key-value to map fmt.Printf(\"a\\t%v\\n\", d) } output a map[a:apple b:ball] b map[x:1 y:2] a map[] b map[] true false a map[a:apple] adding and removing element # package main import (\"fmt\") func main() { var a = map[string]string{\"a\": \"apple\", \"b\": \"ball\"} a[\"a\"] = \"ball\" delete(a, \"b\") fmt.Printf(\"a\\t%v\\n\", a) } output: a map[a:ball] loop through # merge # no builtin func. for k, v := range b { a[k] = v }","title":"GoMaps"},{"location":"aws/maps.html#go-maps","text":"maps are collection of key: value pairs no duplicates. you can use len() function changable","title":"Go maps"},{"location":"aws/maps.html#declaring","text":"var a = map[KeyType]ValueType{key1:value1, key2:value2,...} b := map[KeyType]ValueType{key1:value1, key2:value2,...} var x = make(map[string]string)","title":"declaring"},{"location":"aws/maps.html#example","text":"package main import (\"fmt\") func main() { var a = map[string]string{\"a\": \"apple\", \"b\": \"ball\"} b := map[string]int{\"x\": 1, \"y\": 2} var c map[string]string // empty map using variable var d = make(map[string]string) // empty map using make function fmt.Printf(\"a\\t%v\\n\", a) fmt.Printf(\"b\\t%v\\n\", b) fmt.Printf(\"a\\t%v\\n\", c) fmt.Printf(\"b\\t%v\\n\", d) fmt.Println(c == nil) fmt.Println(d == nil) //c[\"a\"] = \"apple\" // panic: assignment to entry in nil map d[\"a\"] = \"apple\" // adding/updating key-value to map fmt.Printf(\"a\\t%v\\n\", d) } output a map[a:apple b:ball] b map[x:1 y:2] a map[] b map[] true false a map[a:apple]","title":"example"},{"location":"aws/maps.html#adding-and-removing-element","text":"package main import (\"fmt\") func main() { var a = map[string]string{\"a\": \"apple\", \"b\": \"ball\"} a[\"a\"] = \"ball\" delete(a, \"b\") fmt.Printf(\"a\\t%v\\n\", a) } output: a map[a:ball]","title":"adding and removing element"},{"location":"aws/maps.html#loop-through","text":"","title":"loop through"},{"location":"aws/maps.html#merge","text":"no builtin func. for k, v := range b { a[k] = v }","title":"merge"},{"location":"aws/slices.html","text":"Go slices # used to store values of same data type. flixible than arrays. i.e. length of an array can grow or shrink declare a slice: # slice_name := []datatype{values} slice_name := []datatype{} // here length is 0 and capacity is 0 and empty letters := []string{\"a\", \"b\", \"c\", \"d\"} numbers := []int{1, 3, 3, 4, 5} create slice using make func: # declaring slice using make : slice_name := make([]type, length, capacity) capacity equal to length if not defined example: package main import ( \"fmt\" ) func main() { testclice := make([]int, 0) fmt.Printf(\"length = %d\\n\", len(testclice)) fmt.Printf(\"capacity = %d\\n\", cap(testclice)) testclice = append(testclice, 1, 2, 3, 4, 5) fmt.Println(testclice) fmt.Printf(\"length after append = %d\\n\", len(testclice)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice)) fmt.Println(\"----------------------------\") testclice1 := make([]int, 2, 3) fmt.Printf(\"length = %d\\n\", len(testclice1)) fmt.Printf(\"capacity = %d\\n\", cap(testclice1)) testclice1 = append(testclice1, 1, 2, 3 ,4 , 5 ) fmt.Println(testclice1) fmt.Printf(\"length after append = %d\\n\", len(testclice1)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice1)) } output: length = 0 capacity = 0 [1 2 3 4 5] length after append = 5 capacity after append = 6 ---------------------------- length = 2 capacity = 3 [0 0 1 2 3 4 5] length after append = 7 capacity after append = 8 creating a slice from an array: # usage: var testarray = [length]datatype{values} myslice := testarray[start:end] example: package main import ( \"fmt\" ) func main() { testarray := [5]int{1, 2, 3, 4, 5} testslice := testarray[3:5] fmt.Printf(\"length = %d\\n\", len(testslice)) fmt.Printf(\"capacity = %d\\n\", cap(testslice)) fmt.Println(testslice) fmt.Println(\"----------------------------\") y_array := [6]byte{'G', 'o', 'l', 'a', 'n', 'g'} fmt.Println(y_array) y_slice := y_array[3:5] fmt.Println(y_slice) } output: length = 2 capacity = 2 [4 5] ------------------ [71 111 108 97 110 103] [97 110] appending to slice # usahe: c := append(slice1, slice2...) # merging 2 slices c := append(slice1, \"item1\", \"item2\" ) # adding items to slice example: package main import ( \"fmt\" ) func main() { a := []string{\"John\", \"Paul\"} b := []string{\"George\", \"Ringo\", \"Pete\"} a = append(a, b...) // equivalent to \"append(a, b[0], b[1], b[2])\" fmt.Println(a) a = append(a, \"something\") fmt.Println(a) } output: [John Paul George Ringo Pete] [John Paul George Ringo Pete something] get and change a element from slice # usage: slice[index] = \"new_value\" example: package main import ( \"fmt\" ) func main() { b := []string{\"George\", \"Ringo\", \"Pete\"} fmt.Println(b) b[0] = \"Tom\" fmt.Println(b) } output: [George Ringo Pete] [Tom Ringo Pete] copy function # usage: copy(dest, src) as per https://go.dev/blog/slices-intro - re-slicing a slice doesn\u2019t make a copy of the underlying array. The full array will be kept in memory until it is no longer referenced. Occasionally this can cause the program to hold all the data in memory when only a small piece of it is needed. effective: var digitRegexp = regexp.MustCompile(\"[0-9]+\") func FindDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) return digitRegexp.Find(b) } effective: func CopyDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) b = digitRegexp.Find(b) c := make([]byte, len(b)) copy(c, b) return c } example: package main import (\"fmt\") func main() { main_slice := []int{1,2,3,4,5,6,7,8,9,10} fmt.Printf(\"main_slice = %v\\n\", main_slice) fmt.Printf(\"main_slice length= %v\\n\", len(main_slice)) fmt.Printf(\"main_slice capacity = %v\\n\", cap(main_slice)) sub_slice := main_slice[:len(main_slice)-5] fmt.Printf(\"sub_slice = %v\\n\",sub_slice) fmt.Printf(\"sub_slice length = %d\\n\", len(sub_slice)) fmt.Printf(\"sub_slice capacity = %d\\n\", cap(sub_slice)) // copy new_slice := make([]int, len(sub_slice)) copy(new_slice, sub_slice) fmt.Printf(\"new_slice = %v\\n\",new_slice) fmt.Printf(\"new_slice length = %d\\n\", len(new_slice)) fmt.Printf(\"new_slice capacity = %d\\n\", cap(new_slice)) } output: main_slice = [1 2 3 4 5 6 7 8 9 10] main_slice length= 10 main_slice capacity = 10 sub_slice = [1 2 3 4 5] sub_slice length = 5 sub_slice capacity = 10 new_slice = [1 2 3 4 5] new_slice length = 5 new_slice capacity = 5 loop through # example: package main import (\"fmt\") func main() { arr6 := []string{\"tom\", \"dom\"} for i, s := range arr6 { fmt.Println(i, s) } for _, s := range arr6 { fmt.Println(s) } } output: 0 tom 1 dom tom dom Memory Representation # A slice is allocated differently from an array, and is actually a modified pointer. Each slice contains three pieces of information: - The pointer to the sequence of data - The length: which denotes the total number of elements currently contained. - The capacity: which is the total number of memory locations provisioned. Reference Passing # When you assign a slice to another variable, you still pass by value. The value here refers to just the pointer, length, and capacity, and not the memory occupied by the elements themselves. Everything in Go is passed by value, slices too. But a slice value is a header, describing a contiguous section of a backing array, and a slice value only contains a pointer to the array where the elements are actually stored . The slice value does not include its elements (unlike arrays). So when you pass a slice to a function, a copy will be made from this header, including the pointer, which will point to the same backing array. Modifying the elements of the slice implies modifying the elements of the backing array, and so all slices which share the same backing array will \"observe\" the change. more examples # package main import \"fmt\" func main() { fmt.Println(\"Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached.\") fmt.Println(\"Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints:\") t := make([]int, 0, 5) t = append(t, []int{1, 2, 3, 4}...) fmt.Printf(\"t: length: %d, capacity: %d, data: %v\\n\", len(t), cap(t), t) c := append(t, 5) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(c), cap(c), c) d := append(t, 6) fmt.Printf(\"d: length: %d, capacity: %d, data: %v\\n\", len(d), cap(d), d) fmt.Printf(\"c: length: %d, capacity: %d, data: %v\\n\", len(c), cap(c), c) fmt.Println(\" \") fmt.Println(\" \") fmt.Println(\"when new variable added slice capacity doubles\") s := make([]int, 0, 0) s = append(s, []int{1, 2, 3, 4}...) fmt.Printf(\"s: length: %d, capacity: %d, data: %v\\n\", len(s), cap(s), s) a := append(s, 5) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(a), cap(a), a) b := append(s, 6) fmt.Printf(\"b: length: %d, capacity: %d, data: %v\\n\", len(b), cap(b), b) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(a), cap(a), a) a = append(a, 7, 8, 9, 10) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(a), cap(a), a) } output: Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached. Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints: t: length: 4, capacity: 5, data: [1 2 3 4] a: length: 5, capacity: 5, data: [1 2 3 4 5] d: length: 5, capacity: 5, data: [1 2 3 4 6] c: length: 5, capacity: 5, data: [1 2 3 4 6] when new variable added slice capacity doubles s: length: 4, capacity: 4, data: [1 2 3 4] a: length: 5, capacity: 8, data: [1 2 3 4 5] b: length: 5, capacity: 8, data: [1 2 3 4 6] a: length: 5, capacity: 8, data: [1 2 3 4 5] a: length: 9, capacity: 16, data: [1 2 3 4 5 7 8 9 10] More Reading: - https://www.sohamkamani.com/golang/arrays-vs-slices/ - https://stackoverflow.com/questions/39993688/are-slices-passed-by-value - https://www.geeksforgeeks.org/how-to-pass-a-slice-to-function-in-golang/ - https://stackoverflow.com/questions/28115599/when-does-golang-append-create-a-new-slice package main import \"fmt\" func main() { fmt.Println(\"array address\") array1 := [3]int{6, 1, 2} array2 := array1 fmt.Printf(\"Address of array = %v: %p\\n\", array1, &array1) fmt.Printf(\"Address of array = %v: %p\\n\", array2, &array2) fmt.Println(\"-------\") array2[1] = 3333 fmt.Println(array1) fmt.Println(array2) fmt.Println(\"---array done----\") fmt.Println(\"--- print address of slice\") slice1 := []int{6, 1, 2} slice2 := slice1 fmt.Printf(\"Address of slice = %v: %p\\n\", slice1, &slice1) fmt.Printf(\"Address of slice = %v: %p\\n\", slice2, &slice2) fmt.Println(\"--- print address of slice underlying array\") fmt.Printf(\"Address of slice = %v: %p\\n\", slice1, slice1) fmt.Printf(\"Address of slice = %v: %p\\n\", slice2, slice2) fmt.Println(\"Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached.\") fmt.Println(\"Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints:\") t := make([]int, 0, 5) t = append(t, []int{1, 2, 3, 4}...) fmt.Printf(\"t: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(t), cap(t), t, t) c := append(t, 5) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(c), cap(c), c, c) d := append(t, 6) fmt.Printf(\"d: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(d), cap(d), d, d) fmt.Printf(\"c: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(c), cap(c), c, c) fmt.Println(\" \") fmt.Println(\" \") fmt.Println(\"when new variable added slice capacity doubles\") s := make([]int, 0, 0) s = append(s, []int{1, 2, 3, 4}...) fmt.Printf(\"s: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(s), cap(s), s, s) a := append(s, 5) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(a), cap(a), a, a) b := append(s, 6) fmt.Printf(\"b: length: %d, capacity: %d,pointer to underlying array: %p, data: %v\\n\", len(b), cap(b), b, b) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(a), cap(a), a, a) a = append(a, 7, 8, 9, 10) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(a), cap(a), a, a) } Address of array = [6 1 2]: 0xc000128090 Address of array = [6 1 2]: 0xc0001280a8 ------- [6 1 2] [6 3333 2] ---array done---- --- print address of slice Address of slice = [6 1 2]: 0xc000112060 Address of slice = [6 1 2]: 0xc000112078 --- print address of slice underlying array Address of slice = [6 1 2]: 0xc000128138 Address of slice = [6 1 2]: 0xc000128138 Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached. Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints: t: length: 4, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4] a: length: 5, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4 5] d: length: 5, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4 6] c: length: 5, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4 6] when new variable added slice capacity doubles s: length: 4, capacity: 4, pointer to underlying array: 0xc0001240a0, data: [1 2 2 3 4] a: length: 5, capacity: 8, pointer to underlying array: 0xc000140100, data: [1 2 2 3 4 5] b: length: 5, capacity: 8,pointer to underlying array: 0xc000140140, data: [1 2 2 3 4 6] a: length: 5, capacity: 8, pointer to underlying array: 0xc000140100, data: [1 2 2 3 4 5] a: length: 9, capacity: 16, pointer to underlying array: 0xc00015a080, data: [1 2 3 4 5 7 8 9 10]","title":"Slices"},{"location":"aws/slices.html#go-slices","text":"used to store values of same data type. flixible than arrays. i.e. length of an array can grow or shrink","title":"Go slices"},{"location":"aws/slices.html#declare-a-slice","text":"slice_name := []datatype{values} slice_name := []datatype{} // here length is 0 and capacity is 0 and empty letters := []string{\"a\", \"b\", \"c\", \"d\"} numbers := []int{1, 3, 3, 4, 5}","title":"declare a slice:"},{"location":"aws/slices.html#create-slice-using-make-func","text":"declaring slice using make : slice_name := make([]type, length, capacity) capacity equal to length if not defined example: package main import ( \"fmt\" ) func main() { testclice := make([]int, 0) fmt.Printf(\"length = %d\\n\", len(testclice)) fmt.Printf(\"capacity = %d\\n\", cap(testclice)) testclice = append(testclice, 1, 2, 3, 4, 5) fmt.Println(testclice) fmt.Printf(\"length after append = %d\\n\", len(testclice)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice)) fmt.Println(\"----------------------------\") testclice1 := make([]int, 2, 3) fmt.Printf(\"length = %d\\n\", len(testclice1)) fmt.Printf(\"capacity = %d\\n\", cap(testclice1)) testclice1 = append(testclice1, 1, 2, 3 ,4 , 5 ) fmt.Println(testclice1) fmt.Printf(\"length after append = %d\\n\", len(testclice1)) fmt.Printf(\"capacity after append = %d\\n\", cap(testclice1)) } output: length = 0 capacity = 0 [1 2 3 4 5] length after append = 5 capacity after append = 6 ---------------------------- length = 2 capacity = 3 [0 0 1 2 3 4 5] length after append = 7 capacity after append = 8","title":"create slice using make func:"},{"location":"aws/slices.html#creating-a-slice-from-an-array","text":"usage: var testarray = [length]datatype{values} myslice := testarray[start:end] example: package main import ( \"fmt\" ) func main() { testarray := [5]int{1, 2, 3, 4, 5} testslice := testarray[3:5] fmt.Printf(\"length = %d\\n\", len(testslice)) fmt.Printf(\"capacity = %d\\n\", cap(testslice)) fmt.Println(testslice) fmt.Println(\"----------------------------\") y_array := [6]byte{'G', 'o', 'l', 'a', 'n', 'g'} fmt.Println(y_array) y_slice := y_array[3:5] fmt.Println(y_slice) } output: length = 2 capacity = 2 [4 5] ------------------ [71 111 108 97 110 103] [97 110]","title":"creating a slice from an array:"},{"location":"aws/slices.html#appending-to-slice","text":"usahe: c := append(slice1, slice2...) # merging 2 slices c := append(slice1, \"item1\", \"item2\" ) # adding items to slice example: package main import ( \"fmt\" ) func main() { a := []string{\"John\", \"Paul\"} b := []string{\"George\", \"Ringo\", \"Pete\"} a = append(a, b...) // equivalent to \"append(a, b[0], b[1], b[2])\" fmt.Println(a) a = append(a, \"something\") fmt.Println(a) } output: [John Paul George Ringo Pete] [John Paul George Ringo Pete something]","title":"appending to slice"},{"location":"aws/slices.html#get-and-change-a-element-from-slice","text":"usage: slice[index] = \"new_value\" example: package main import ( \"fmt\" ) func main() { b := []string{\"George\", \"Ringo\", \"Pete\"} fmt.Println(b) b[0] = \"Tom\" fmt.Println(b) } output: [George Ringo Pete] [Tom Ringo Pete]","title":"get and change a element from slice"},{"location":"aws/slices.html#copy-function","text":"usage: copy(dest, src) as per https://go.dev/blog/slices-intro - re-slicing a slice doesn\u2019t make a copy of the underlying array. The full array will be kept in memory until it is no longer referenced. Occasionally this can cause the program to hold all the data in memory when only a small piece of it is needed. effective: var digitRegexp = regexp.MustCompile(\"[0-9]+\") func FindDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) return digitRegexp.Find(b) } effective: func CopyDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) b = digitRegexp.Find(b) c := make([]byte, len(b)) copy(c, b) return c } example: package main import (\"fmt\") func main() { main_slice := []int{1,2,3,4,5,6,7,8,9,10} fmt.Printf(\"main_slice = %v\\n\", main_slice) fmt.Printf(\"main_slice length= %v\\n\", len(main_slice)) fmt.Printf(\"main_slice capacity = %v\\n\", cap(main_slice)) sub_slice := main_slice[:len(main_slice)-5] fmt.Printf(\"sub_slice = %v\\n\",sub_slice) fmt.Printf(\"sub_slice length = %d\\n\", len(sub_slice)) fmt.Printf(\"sub_slice capacity = %d\\n\", cap(sub_slice)) // copy new_slice := make([]int, len(sub_slice)) copy(new_slice, sub_slice) fmt.Printf(\"new_slice = %v\\n\",new_slice) fmt.Printf(\"new_slice length = %d\\n\", len(new_slice)) fmt.Printf(\"new_slice capacity = %d\\n\", cap(new_slice)) } output: main_slice = [1 2 3 4 5 6 7 8 9 10] main_slice length= 10 main_slice capacity = 10 sub_slice = [1 2 3 4 5] sub_slice length = 5 sub_slice capacity = 10 new_slice = [1 2 3 4 5] new_slice length = 5 new_slice capacity = 5","title":"copy function"},{"location":"aws/slices.html#loop-through","text":"example: package main import (\"fmt\") func main() { arr6 := []string{\"tom\", \"dom\"} for i, s := range arr6 { fmt.Println(i, s) } for _, s := range arr6 { fmt.Println(s) } } output: 0 tom 1 dom tom dom","title":"loop through"},{"location":"aws/slices.html#memory-representation","text":"A slice is allocated differently from an array, and is actually a modified pointer. Each slice contains three pieces of information: - The pointer to the sequence of data - The length: which denotes the total number of elements currently contained. - The capacity: which is the total number of memory locations provisioned.","title":"Memory Representation"},{"location":"aws/slices.html#reference-passing","text":"When you assign a slice to another variable, you still pass by value. The value here refers to just the pointer, length, and capacity, and not the memory occupied by the elements themselves. Everything in Go is passed by value, slices too. But a slice value is a header, describing a contiguous section of a backing array, and a slice value only contains a pointer to the array where the elements are actually stored . The slice value does not include its elements (unlike arrays). So when you pass a slice to a function, a copy will be made from this header, including the pointer, which will point to the same backing array. Modifying the elements of the slice implies modifying the elements of the backing array, and so all slices which share the same backing array will \"observe\" the change.","title":"Reference Passing"},{"location":"aws/slices.html#more-examples","text":"package main import \"fmt\" func main() { fmt.Println(\"Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached.\") fmt.Println(\"Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints:\") t := make([]int, 0, 5) t = append(t, []int{1, 2, 3, 4}...) fmt.Printf(\"t: length: %d, capacity: %d, data: %v\\n\", len(t), cap(t), t) c := append(t, 5) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(c), cap(c), c) d := append(t, 6) fmt.Printf(\"d: length: %d, capacity: %d, data: %v\\n\", len(d), cap(d), d) fmt.Printf(\"c: length: %d, capacity: %d, data: %v\\n\", len(c), cap(c), c) fmt.Println(\" \") fmt.Println(\" \") fmt.Println(\"when new variable added slice capacity doubles\") s := make([]int, 0, 0) s = append(s, []int{1, 2, 3, 4}...) fmt.Printf(\"s: length: %d, capacity: %d, data: %v\\n\", len(s), cap(s), s) a := append(s, 5) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(a), cap(a), a) b := append(s, 6) fmt.Printf(\"b: length: %d, capacity: %d, data: %v\\n\", len(b), cap(b), b) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(a), cap(a), a) a = append(a, 7, 8, 9, 10) fmt.Printf(\"a: length: %d, capacity: %d, data: %v\\n\", len(a), cap(a), a) } output: Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached. Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints: t: length: 4, capacity: 5, data: [1 2 3 4] a: length: 5, capacity: 5, data: [1 2 3 4 5] d: length: 5, capacity: 5, data: [1 2 3 4 6] c: length: 5, capacity: 5, data: [1 2 3 4 6] when new variable added slice capacity doubles s: length: 4, capacity: 4, data: [1 2 3 4] a: length: 5, capacity: 8, data: [1 2 3 4 5] b: length: 5, capacity: 8, data: [1 2 3 4 6] a: length: 5, capacity: 8, data: [1 2 3 4 5] a: length: 9, capacity: 16, data: [1 2 3 4 5 7 8 9 10] More Reading: - https://www.sohamkamani.com/golang/arrays-vs-slices/ - https://stackoverflow.com/questions/39993688/are-slices-passed-by-value - https://www.geeksforgeeks.org/how-to-pass-a-slice-to-function-in-golang/ - https://stackoverflow.com/questions/28115599/when-does-golang-append-create-a-new-slice package main import \"fmt\" func main() { fmt.Println(\"array address\") array1 := [3]int{6, 1, 2} array2 := array1 fmt.Printf(\"Address of array = %v: %p\\n\", array1, &array1) fmt.Printf(\"Address of array = %v: %p\\n\", array2, &array2) fmt.Println(\"-------\") array2[1] = 3333 fmt.Println(array1) fmt.Println(array2) fmt.Println(\"---array done----\") fmt.Println(\"--- print address of slice\") slice1 := []int{6, 1, 2} slice2 := slice1 fmt.Printf(\"Address of slice = %v: %p\\n\", slice1, &slice1) fmt.Printf(\"Address of slice = %v: %p\\n\", slice2, &slice2) fmt.Println(\"--- print address of slice underlying array\") fmt.Printf(\"Address of slice = %v: %p\\n\", slice1, slice1) fmt.Printf(\"Address of slice = %v: %p\\n\", slice2, slice2) fmt.Println(\"Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached.\") fmt.Println(\"Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints:\") t := make([]int, 0, 5) t = append(t, []int{1, 2, 3, 4}...) fmt.Printf(\"t: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(t), cap(t), t, t) c := append(t, 5) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(c), cap(c), c, c) d := append(t, 6) fmt.Printf(\"d: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(d), cap(d), d, d) fmt.Printf(\"c: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(c), cap(c), c, c) fmt.Println(\" \") fmt.Println(\" \") fmt.Println(\"when new variable added slice capacity doubles\") s := make([]int, 0, 0) s = append(s, []int{1, 2, 3, 4}...) fmt.Printf(\"s: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(s), cap(s), s, s) a := append(s, 5) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(a), cap(a), a, a) b := append(s, 6) fmt.Printf(\"b: length: %d, capacity: %d,pointer to underlying array: %p, data: %v\\n\", len(b), cap(b), b, b) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(a), cap(a), a, a) a = append(a, 7, 8, 9, 10) fmt.Printf(\"a: length: %d, capacity: %d, pointer to underlying array: %p, data: %v\\n\", len(a), cap(a), a, a) } Address of array = [6 1 2]: 0xc000128090 Address of array = [6 1 2]: 0xc0001280a8 ------- [6 1 2] [6 3333 2] ---array done---- --- print address of slice Address of slice = [6 1 2]: 0xc000112060 Address of slice = [6 1 2]: 0xc000112078 --- print address of slice underlying array Address of slice = [6 1 2]: 0xc000128138 Address of slice = [6 1 2]: 0xc000128138 Go takes a more lean and lazy approach in doing this. It keeps modifying the same underlying array until the capacity of a slice is reached. Because since s still has capacity, both a and b share the same data ptr. If you change the capacity to 4, it prints: t: length: 4, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4] a: length: 5, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4 5] d: length: 5, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4 6] c: length: 5, capacity: 5, pointer to underlying array: 0xc00013c090, data: [1 2 3 4 6] when new variable added slice capacity doubles s: length: 4, capacity: 4, pointer to underlying array: 0xc0001240a0, data: [1 2 2 3 4] a: length: 5, capacity: 8, pointer to underlying array: 0xc000140100, data: [1 2 2 3 4 5] b: length: 5, capacity: 8,pointer to underlying array: 0xc000140140, data: [1 2 2 3 4 6] a: length: 5, capacity: 8, pointer to underlying array: 0xc000140100, data: [1 2 2 3 4 5] a: length: 9, capacity: 16, pointer to underlying array: 0xc00015a080, data: [1 2 3 4 5 7 8 9 10]","title":"more examples"}]}